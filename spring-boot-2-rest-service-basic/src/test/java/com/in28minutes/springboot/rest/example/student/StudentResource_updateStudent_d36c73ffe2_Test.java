// Test generated by RoostGPT for test RestBasicService using AI Type Open AI and AI Model gpt-4

package com.in28minutes.springboot.rest.example.student;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.Optional;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.in28minutes.springboot.rest.example.student.entities.Student;
import com.in28minutes.springboot.rest.example.student.repositories.StudentRepository;

@SpringBootTest
@AutoConfigureMockMvc
public class StudentResource_updateStudent_d36c73ffe2_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private StudentRepository studentRepository;

    @Test
    public void testUpdateStudent_whenStudentExists() throws Exception {
        Student student = new Student();
        student.setName("John Doe");
        student.setId(1L);

        given(studentRepository.findById(1L)).willReturn(Optional.of(student));

        mockMvc.perform(put("/students/1")
                .content(new ObjectMapper().writeValueAsString(student))
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());
    }

    @Test
    public void testUpdateStudent_whenStudentDoesNotExist() throws Exception {
        Student student = new Student();
        student.setName("John Doe");
        student.setId(1L);

        given(studentRepository.findById(1L)).willReturn(Optional.empty());

        mockMvc.perform(put("/students/1")
                .content(new ObjectMapper().writeValueAsString(student))
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());
    }
}
