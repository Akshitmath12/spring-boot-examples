// Test generated by RoostGPT for test RestBasicService using AI Type Open AI and AI Model gpt-4

package com.in28minutes.springboot.rest.example.student;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

public class StudentResource_createStudent_52b9f59693_Test {

    @InjectMocks
    StudentResource studentResource;

    @Mock
    StudentRepository studentRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);

        MockHttpServletRequest request = new MockHttpServletRequest();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));
    }

    @Test
    public void testCreateStudent() {
        Student student = new Student();
        student.setId(1L);
        student.setName("John Doe");

        when(studentRepository.save(student)).thenReturn(student);

        ResponseEntity<Object> responseEntity = studentResource.createStudent(student);

        assertThat(responseEntity.getStatusCodeValue()).isEqualTo(201);
        assertThat(responseEntity.getHeaders().getLocation().getPath()).isEqualTo("/1");
    }

    @Test
    public void testCreateStudentFailure() {
        Student student = new Student();
        student.setId(1L);
        student.setName("John Doe");

        when(studentRepository.save(student)).thenReturn(null);

        ResponseEntity<Object> responseEntity = studentResource.createStudent(student);

        assertThat(responseEntity.getStatusCodeValue()).isEqualTo(500);
    }
}
