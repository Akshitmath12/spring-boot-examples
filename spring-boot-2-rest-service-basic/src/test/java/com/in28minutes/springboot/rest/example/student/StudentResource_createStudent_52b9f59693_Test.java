// Test generated by RoostGPT for test RestBasicService using AI Type Open AI and AI Model gpt-4

package com.in28minutes.springboot.rest.example.student;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.net.URI;
import java.net.URISyntaxException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

public class StudentResource_createStudent_52b9f59693_Test {

    @InjectMocks
    private StudentResource studentResource;

    @Mock
    private StudentRepository studentRepository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateStudent() throws URISyntaxException {
        Student student = new Student("John", "Doe", "john.doe@example.com");
        when(studentRepository.save(student)).thenReturn(student);

        ResponseEntity<Object> responseEntity = studentResource.createStudent(student);

        URI expectedLocation = new URI(ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(student.getId()).toUri().toString());
        assertEquals(201, responseEntity.getStatusCodeValue());
        assertEquals(expectedLocation, responseEntity.getHeaders().getLocation());
    }

    @Test
    public void testCreateStudent_nullStudent() {
        ResponseEntity<Object> responseEntity = studentResource.createStudent(null);

        assertEquals(400, responseEntity.getStatusCodeValue());
    }
}
