// Test generated by RoostGPT for test RestBasicService using AI Type Open AI and AI Model gpt-4

package com.in28minutes.springboot.rest.example.student;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.net.URI;
import java.net.URISyntaxException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

public class StudentResource_createStudent_52b9f59693_Test {

    @InjectMocks
    StudentResource studentResource;

    @Mock
    StudentRepository studentRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateStudent() throws URISyntaxException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));

        when(studentRepository.save(any(Student.class))).thenAnswer((i) -> {
            Student student = i.getArgument(0);
            student.setId(1L);
            return student;
        });

        Student student = new Student("John", "A", "john@gmail.com");
        ResponseEntity<Object> responseEntity = studentResource.createStudent(student);

        assertEquals(201, responseEntity.getStatusCodeValue());

        URI expectedLocation = new URI(request.getRequestURL().toString() + "/1");
        assertEquals(expectedLocation, responseEntity.getHeaders().getLocation());
    }

    @Test
    public void testCreateStudent_NullStudent() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));

        Student student = null;
        ResponseEntity<Object> responseEntity = studentResource.createStudent(student);

        assertEquals(400, responseEntity.getStatusCodeValue());
    }
}
